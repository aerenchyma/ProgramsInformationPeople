:orphan:

..  Copyright (C) Paul Resnick, Jackie Cohen, Sam Carton.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. highlight:: python
    :linenothreshold: 500


Activities through 12/02
========================

.. note::

  A note on this week's material. 

  This week, we will cover the **Pyglet** library, which is one of several Python libraries that allow you to write games and interactive audio/visual programs in Python. This library also deals with the concepts of **event-driven loops**, which, if you go on to study JavaScript and other front-end web development, you'll see frequently. 

  The Pyglet material this week -- the textbook reading, and the problem set, the lectures and discussion section -- is optional. (The reading response and DYU are the same as always.) If you choose to spend your week on Recursion and your final project preparation and not do these things, that's fine. However, if you study Human-Computer Interaction, you may find the Pyglet material especially interesting and useful; this week is for you! Even if you don't, you may find this material intriguing and fun. 

  You are of course welcome to attend lectures and section but choose not to complete the Pyglet problem set. If you do, you're expected to do the lecture prep that corresponds with them -- otherwise, it will be harder to participate in lecture!

  If you do complete the Pyglet problem set, its points count the same way as any other problem set. So if you did not do as well as you wanted to on more than 2 problem sets, this is also a chance to make up for one of those scores.

  With that in mind...

* **Before class Monday 11/28:**

  * **IF YOU CHOOSE TO STUDY PYGLET MATERIAL:**
  * Read the below listed sections of :ref:`Pyglet <pyglet_chap>` (all except for the last subchapter on the Pong game), and install the ``pyglet`` library with the pip installer.
  * Download the `Pyglet Materials <https://umich.instructure.com/courses/108426/files/folder/Pyglet%20Materials>`_ folder from Canvas and try out some of the code.

.. usageassignment::
  :subchapters: Pyglet/Pyglet, Pyglet/pygletWindow, Pyglet/eventListener, Pyglet/windowContents, Pyglet/sounds, Pyglet/jinglingSquare, Pyglet/schedulingEvents
  :assignment_name: Prep 21
  :deadline: 2016-11-30 18:40
  :pct_required: 80
  :points: 50

* **Before class Wednesday 11/30:**

  * **IF YOU CHOOSE TO STUDY PYGLET MATERIAL:**
  * Read the **Pong** subchapter of :ref:`Pyglet <pyglet_chap>`, and review the earlier sections as necessary. You may want to check out the ``basepong.py`` file in the Pyglet Materials folder you downloaded.
  * Inside the Canvas **Pyglet Materials** folder (Files > Pyglet Materials) that you downloaded for Monday, there is a PDF called **LecturePongQuestions.pdf**. Try to answer questions 1-11 before class Wednesday, and bring a printed copy of the questions. (They are for you, you do not have to turn them in!) We will go over answers to those questions in class, and work on answering more of questions during lecture.

* **Before Sunday 12/04 at 11:59 PM:**

  * Complete and submit your :ref:`Problem Set 10 <problem_set_10>` (the problem set from last week's Recursion material).
  * If you chose to do the Pyglet problem set, complete and submit your :ref:`Problem Set 11 <problem_set_11>`.
  * Save an answer to your Demonstrate Understanding for this week (linked below).
  * Complete :ref:`Reading Response 12 <reading_response_12>`.


This Week's Reading Responses
-----------------------------

.. _reading_response_12:

.. external:: rr_12

  `Reading Response 12 <https://umich.instructure.com/courses/108426/assignments/139261>`_ on Canvas.


.. _problem_set_11:

Problem Set
-----------

Go `HERE to see the Problem Set 11 assignment <https://umich.instructure.com/courses/108426/assignments/139252>`_, where you can find the files you need to download, and where you can submit your completed problem set file for this assignment.

.. note::

    Reminder: we do not debug code when grading, so we cannot grade code that does not run! Make sure your code runs before submitting it -- you should comment out any code that does not.


.. external:: ps_11_preamble
    
    **ABOUT THIS PROBLEM SET**

    We've provided a base code file (like ``basepong.py``), which contains code for a Pong game much like you saw in class this week.

    In this problem set, you have several tasks to alter the code in order to make your program into a a Breakout game (a video game similar to Pong), by following our instructions to alter the code we have provided. 

    It may help to think back to the questions from lecture and from section about how to alter the Pong game in different ways!

    To run this problem set, you will need to download all of the files in the folder Files > Problem Sets > PS11. 

    You should edit and submit the ``506_ps11.py`` file, which should run if it is in a directory with all the other files we provided.

    **Also note:** don't worry about the score in the upper right-hand corner if it does not work for you. On a number of computers we have found that it does not work. You are welcome to play around with it; it will not affect your grade.

.. external:: ps_11_01

	**PROBLEM 1**

	First, run the code as is! Convince yourself that it works, and think at a high-level how it works! What questions do you have that make you feel like you can't do these problems? Talk about those, ask them on the Facebook group, ask them in section, in office hours.

	Now, for the first problem, make a 1-player Pong game: a game where the right-most wall just reflects the ball back instead of scoring a point. 

	We have already changed the ball's starting position and angle in the code we provided. **You'll only need to make changes to Game.__init__() to solve this.**   

	Questions to help you do this:
	a) How can you remove the second player's paddle? 
	b) How can you make the right-hand wall deflect the ball back instead of scoring a point? (**Hint:** make the right-hand wall an instance of a different class.)

.. external:: ps_11_02

	**PROBLEM 2**

	Make a 6-deep floor-to-ceiling barricade of bricks on the right side, analogous to the maze walls we created in lecture code. In other words, on the right side of the screen, you should make it so there are 6 columns of bricks that reach from the bottom of the window to the top of the window.

	Test this to make sure it works before going on! 

	Some thoughts on how go about this:

	How would you make one brick, with an x-coordinate that 100 less than the width of the window and a y-coordinate that is 0 (at the bottom of the screen)? 

	Where in the code would you put the code to create a brick, so that it will show up on the screen? 

	How would you make one whole column of bricks, using a for loop? (To make a column, the ``x`` position will be fixed, but the ``y`` position will get larger with each successive iteration.) You can calculate how many bricks are needed (and therefore, how many times to iterate), by dividing the window height by the height of a brick! Separating this task into several distinct problems to be solved may help with this.

	Then, how would you make a set of six columns? Try iterating six times. You'lll need nested for-loops: do what you did to make a column of bricks. On each *outer* iteration, the x position should be larger, and you'll use an inner for loop to make a whole column of bricks at that position.

	Drawing this out before coding it will also probably help!

.. external:: ps_11_03

	**PROBLEM 3**

	Make bricks disappear when they are hit by the ball, by making a ``Brick`` subclass of ``BallDeflector`` and switching your bricks from problem 2 to be instances of ``Brick`` instead of instances of ``BallDeflector``. (If you did problem 2 with nested iteration, you should only have to change one tiny bit of code to do this.)  

	Test this to see if the bricks disappear after they are hit!   

	Hints on how to do this:   
	(a) Make the Brick subclass of BallDeflector 

	(b) Make the bricks be instances of the new Brick class instead of the BallDeflector class (call the Brick constructor instead of the BallDeflector constructor) 
    
	(c) In the Brick class, override the ``deflect_ball()`` method: call the parent class' ``deflect_ball()`` method, so that the balls deflects normally, but also remove the brick from game instance's list of ``game_objects`` after that. 

	That way, when the game tells all of it's game_objects to display themselves, this brick won't display. Also, when the ball tries to see if it's collided with any other game objects, it won't check with this brick any more.

.. external:: ps_11_04

	**PROBLEM 4**

	Write code in your program to keep track of how many bricks have been hit. When every 3rd brick gets hit (when 3 bricks have been hit, when 6 bricks have been hit... etc), increase the ball's velocity by 1.  

	**HINT:** you'll have done something like this in the code for section, when you makes the ball speed up on every 4th hit by a paddle.

.. external:: ps11_dyu

    Complete this week's `Demonstrate Your Understanding <https://umich.instructure.com/courses/108426/assignments/139239>`_ assignment on Canvas.
