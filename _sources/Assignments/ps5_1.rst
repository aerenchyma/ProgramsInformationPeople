le:orphan:

..  Copyright (C) Jackie Cohen, Paul Resnick.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

Activities through 2/12
=======================

* **Before class Monday 2/6:**
  
  * Read just the :ref:`introduction to Unit Testing<test_cases_chap>`. (We will discuss this on Monday in lecture! You do *not* have to read the rest of this chapter beyond the introductory section; it addreses material we have not learned yet in this course. We will focus in more depth on that material later in the semester. But this week is the first time you will see the code for Unit Tests, so we will teach you how to understand the output you get from them when you run problem sets on your own computer.)
  * Review :ref:`Sorting<sort_chap>` (not graded this time) and below section about debugging
  * Read the :ref:`Unix<unix_chapter>` chapter and try the exercises in that chapter on your computer
  * Read :ref:`Installing a text editor<text_editor_installation>` section and make sure you have a text editor installed. (You can leave the rest of the installation chapter aside, though it may be a useful reference.)
  * Read the `Python installation instructions <https://umich.instructure.com/courses/150918/assignments/269709>`_ on Canvas, 


.. usageassignment::
  :subchapters: Testing/intro-TestCases, GeneralIntro/ExperimentalDebugging,Unix/CommandPrompt, Unix/FoldersAndPaths, Unix/DirectoriesAndCopying, Unix/lessCommand
  :assignment_name: Lecture Prep 08
  :deadline: 2017-02-08 20:30
  :pct_required: 75
  :points: 50

* **Before Wednesday's class, 2/8:**

  * Read `this tutorial on Unix pipes <http://www.ee.surrey.ac.uk/Teaching/Unix/unix3.html>`_ (you can ignore the ``who`` command in the tutorial) and `this tutorial on the Unix command grep <http://www.ee.surrey.ac.uk/Teaching/Unix/unix2.html>`_ (you can scroll down to it on that page).
  * Read :ref:`Nested Data and Nested Iteration<nested_chap>` and try exercises in sections listed below

.. usageassignment::
  :subchapters:  NestedData/ListswithComplexItems, NestedData/NestedDictionaries, NestedData/NestedIteration, NestedData/DebuggingNestedData
  :assignment_name: Lecture Prep 09
  :deadline: 2017-02-08 17:30
  :pct_required: 75
  :points: 50

* Before Sunday, *2/19* 11:59 PM, compete the :ref:`Unix Exercises<problem_set_4_unix>` and submit screenshots to Canvas (see below).

* Before Sunday, *2/19* 11:59 PM, compete :ref:`Problem Set 5<problem_set_5>` and submit it to Canvas (see below).

* **Note that your midterm is next week, during class time on Wednesday, February 15.** It will cover all material up through sorting, but not Unix. More info in announcement.


.. note::

  **Your Problem Set 5 is due Sunday FEBRUARY 19th, NOT February 12th.** 

  However, the Unix Exercises that are the other 500 points missing from PS4 are *also* due February 19, and your midterm is so we recommend you try to complete PS 5 this week!

.. note::

	Starting this week, with **problem set 5**, your problem sets will be completed in ``.py`` files that you will download from Canvas and edit to add your answers. You will test them and work on them by running them via the command prompt. 

	Note that the test output will look different now -- you won't have the nice box with colors that you have in the textbook. However, you will still have the same information and more power to see what is being tested.

	**You will submit your final files in Canvas assignments.** However, the instructions for each problem on the assignment will be found in the textbook, as usual. You will need to reference the textbook for the instructions for each problem, and in the files we provide you, we will provide whatever code (if any) that we intend you to start with, beneath comments e.g. ``## [PROBLEM 1]``.

	Your problem set grades, once they are complete, will appear in the textbook progress page, just like your other problem sets.

	**Please make sure that you include the "ps#", e.g. ``ps5`` in your problem set file name when you submit it.** (Even better, don't change the file name at all!) That will make the instructional team's lives much easier.





.. _problem_set_4_unix:

For each step of the Unix part of this problem set, please take a screenshot that shows us the command(s) you typed and the results. Save the screenshots as ``step1.jpg`` (or ``.png``), ``step2.jpg``, etc. Upload them all to `the Unix Exercises <https://umich.instructure.com/courses/150918/assignments/231792>`_ assignment on Canvas.

Following the Unix exercises, there are a few Activecode windows and directions for Python exercises which comprise the second part of this problem set.

----------

.. external:: problem_set_4_unix_1

    1. Open the text editor you installed: Sublime Text. You will be creating and saving 4 different files to your ``Desktop``. 

    **In the first file,** put the following:

    .. sourcecode:: python

        print "hello world"

    Save the file as ``prog1.py``. You've now saved a Python program on your computer.



    **In the second file,** put the following:

    .. sourcecode:: python

        def greeting(x):
            return "hello " + x

        print greeting("there")

    Save this file as ``prog2.py``.
    


    **In the third file,** put the following:

    :: 

        this is a file
        it has 
        multiple
        lines

    Save this as ``unix_test_text.txt``.


    **In the fourth file,** put the following:

    ::

        here is another file
        what a wonderful
        story this is

    Save this file as ``another_text.txt``.

    No need to take a screenshot of the file saving since you need them for the rest of the exercises, but if it's not working or is confusing, let staff know right away so we can help.

.. external:: problem_set_4_unix_2

    2. Open your Command Prompt program -- Terminal or Git Bash. ``cd`` to your ``Desktop``, as you saw in the chapter. Then type ``ls``. You should see a list of all file names on your Desktop, including the files you just saved in step 1. If you have any directories saved in your Desktop, you'll also see those names, of course. Take a screenshot that shows this worked for you.

.. external:: problem_set_4_unix_3

    3. You now want to make a new directory called ``new_class_programs`` in your ``Desktop``, and copy ``prog1.py`` and ``prog2.py`` into it. (Note that files will NOT disappear from your desktop when you've completed this step. There should be a copy of each file in both places.) 

    Use Unix commands to do this, and take a screenshot of the commands you use + evidence they worked. (Hint: using commands like ``cd`` and ``ls`` and ``pwd`` can help you check what you've done when you're creating directories and copying files around! It will also be useful to remind yourself of what ``mkdir`` and ``cp`` do.) 

    There is more than one perfectly reasonable way to complete this exercise, but all ways use a similar set of Unix commands.

.. external:: problem_set_4_unix_4
    
    4. Now, you want to create a new directory *inside* the ``new_class_programs`` directory, called ``text_files``, and copy both ``unix_test_text.txt`` and ``another_text.txt`` into *that* folder. Use Unix commands to do this. 

    When you've completed that, change directories to be inside that folder in your command prompt, and use the ``pwd`` command to show the full path of your location. (It should look *something like* this: ``/Users/Jackie/Desktop/new_class_programs/text_files``)

    Take a screenshot showing that these things worked for you. Your screenshot should show the command you typed + evidence it worked.

.. external:: problem_set_4_unix_5

    5. You want to see what content is inside each of your files. Use a unix command to view the content of ``prog2.py`` before you open it. Take a screenshot to show that this worked.

.. external:: problem_set_4_unix_6

    6. You want to concatenate the 2 text files inside the ``text_files`` folder together, and save the result in a file called ``big_story.txt``, which should also be inside that directory. Use unix commands to do this. (Hint: You'll probably need more than 1 typed in the same line.)

.. external:: problem_set_4_unix_7

    7. You now want to see a list of all the files and/or directories inside your ``new_class_programs`` folder whose names include ``text``. Use Unix commands to do this. (Hint: You'll need pipe (``|``) and ``grep``, and ``ls``.)

.. external:: problem_set_4_unix_8

    8. Now that you have a bunch of practice with the unix command prompt, it's time to run Python natively on your computer. You've saved 2 Python files that are in your ``~/Desktop/new_class_programs`` directory. Go there in your command prompt, and run ``prog2.py`` by typing ``python prog2.py`` at the prompt. Take a screenshot of what happens. 

    (Feel free to also play around -- you know a lot of programming now, and you can run it all on your computer, but it will look a little bit different in the command prompt than it did in the textbook.)

.. note::

    You may find/know about another way to run your python program directly from Sublime Text. We have found that this will not work for everything you need to do throughout the semester. Therefore, it's very important that you learn how to run your python programs from the unix command prompt, including figuring out how to connect to the right directory with the unix ``cd`` command. You will only get credit for these unix problems if your screenshots show that you ran the programs from the unix command prompt.

.. note::

  **This above is very important for the rest of the semester.** Starting with Problem Set 5, ALL of your problem sets will be turned in via Canvas, and you will be writing code in a text editor and running it on your own computer. If you have any trouble running Python natively (on your computer), let an instructor know *right away.*


.. _problem_set_5:

Problem Set
-----------

To find the file for your problem set, and to submit your assignment on Canvas, go `HERE <https://umich.instructure.com/courses/150918/assignments/231793>`_.

.. external:: ps_5_1

    1. Write code to sort the list ``fall_list`` in reverse alphabetical order. Assign the result of the sorted list to the variable ``sorted_fall_list``.

.. external:: ps_5_2

    2. First, write code to sort the list ``food_amounts`` by the key ``sugar_grams``, from lowest to highest. Assign that sorted list to the variable ``sorted_sugar``. 

    Next, write code to sort the list ``food_amounts`` by the value of the key ``carbohydrate`` minus the value of the key ``fiber`` in each one, from lowest difference to highest. Assign this sorted list to a variable ``raw_carb_sort``.

.. external:: ps_5_3

    3. Use the ``curl`` Unix command to download the file ``words.txt``, like so: ``curl http://www.puzzlers.org/pub/wordlists/ospd.txt > words.txt``. Make sure to do so in the same directory where you have saved this ``ps5.py`` file.

    There are 19 3-letter words in the Scrabble dictionary provided in the ``words.txt`` file which contain the letter 'z'. Write code to generate a list of them. That list should be sorted in *reverse* alphabetical order (i.e. ``'zoo'`` should be first and ``'adz'`` should be last). Save that list in a variable ``short_z_words``.

    **NOTE:** to get rid of the blank line character at the end of each line in the file, use the ``.strip()`` string method.

.. external:: ps_5_4

    4. Write code to generate a list of the 10 highest-scoring words from the Scrabble dictionary that contain the letter 'z'. Save it in the variable ``best_z_words``. You may assume there are no bonuses that double or triple letter values or entire words. The dictionary saved in ``letter_values`` contains the Scrabble score information: its keys are letters, and its values are the scores associated with those letters.

    If you have never played Scrabble before, `here is an explanation <https://en.wikipedia.org/wiki/Scrabble>`_ of what it is. (You do not need that information to solve this problem. All you need to know is that each letter is associated with a number of points, and you want to find the ten words that are associated with the largest point totals.)

    **HINT:** In the textbook section on Accumulating Results from a Dictionary, there is code that computes the scrabble score for the entire text of "A Study in Scarlet". You may want to adapt that.

.. external:: ps_5_5

    5. We have provided a nested list in the variable ``nl``. Write code to accumulate a list containing the second (as humans count) element of each sub-list and save it in a variable ``second_elems``.

.. external:: ps_5_6

    6. Define a function ``convert_nums``. The function should accept an integer as input, representing a number of hours. It should return a tuple of that number converted to minutes (* 60), and then that number converted to seconds (* 3600). For example, if ``1`` were input into the function, the return value of that invocation should be the tuple ``60, 3600``.

.. external:: ps_5_7

    7.  We've provided a complex nested dictionary saved in the variable ``fb_data``. This is a lot like real data you'll get from Facebook (but a little bit simpler, and fake data). 

    Here we've also provided some questions to help you. We will not grade, or expect you to write, answers to these questions, but we suggest you think about them and write them in comments to practice understanding this big nested data structure. Test your predictions using print statements in the code file! Questions:

    - What type is the structure saved in the variable ``fb_data``?
    - What about ``fb_data["data"][1]``?
    - What about ``fb_data["data"][0]["from"]``?
    - What about ``fb_data["data"][0]["id"]``?

    Now, write a line of code to assign the value of the first message ("This problem might...") from the big ``fb_data`` data structure to a variable called ``first_message``. (Do not hard-code your answer! That means, write it in terms of fb_data, so that it would work with any content stored in the variable ``fb_data`` that has the same structure as that of the one we gave you.)

    Then write a second line of code to assign the value of the name of the second person who posted ("John Smythe") to a variable called ``second_name``. Do not hard code your answer!

.. external:: ps_5_8

    6. Define a function ``sort_nested_lists`` that accepts as input a list of lists of integers, e.g. ``[[2,3],[45,100,2],[536],[103,2,8]]``. It should return a sorted version of that list, sorted by the sum of the integers in each sub-list. For example, if that list were the function's input, the return value should be ``[[2,3],[103,2,8],[45,100,2],[536]]``. 

    **Suggestion:** It's a good idea to come up with some sample "test cases" to help yourself work through this, in addition to the tests we have provided in your code file. Come up with sample lists where it's easy to figure out what the correct sorting is, and make invocations to your function using that input, and print out the results. If you get different output than you expect, trace through the process to figure out where it might have gone wrong. Writing out an English plan for this and translating it into code bit by bit may also be a good idea.

.. external:: ps5_dyu

    Complete this week's `Demonstrate Your Understanding <https://umich.instructure.com/courses/150918/assignments/231780>`_ assignment on Canvas.
